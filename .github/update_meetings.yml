# Name of the workflow (displayed on the Actions tab)
name: Update Meetings JSON

# Controls when the workflow will run
on:
  # Triggers the workflow on a schedule (uses UTC time)
  schedule:
    # Runs every 6 hours (at minutes 0 past the hour, every 6th hour)
    # You can adjust the cron schedule: https://crontab.guru/
    - cron: '0 */6 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "update-json"
  update-json:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Use a specific Python version or '3.x' for the latest 3 series
          python-version: '3.10' # <-- Adjust Python version if needed

      # Step 3: Install dependencies (Optional - if your script needs packages)
      # If you have a requirements.txt file, uncomment the next lines
      #- name: Install dependencies
      #  run: |
      #    python -m pip install --upgrade pip
      #    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 4: Run the Python script to update meetings.json
      - name: Run meetings fetcher script
        run: python meetings_fetcher.py # Assumes the script is in the root

      # Step 5: Commit and push changes back to the repository
      - name: Commit and push if changes
        run: |
          # Configure git user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Stage the potential changes
          git add meetings.json
          
          # Check if there are changes to commit
          # If git diff --staged --quiet is silent (exit code 0), there are no changes
          # If it's not silent (exit code 1), there are changes
          if ! git diff --staged --quiet; then
            # Commit the changes
            git commit -m "Update meetings.json [skip ci]" # Add [skip ci] to prevent triggering other actions if needed
            # Push the changes back to the branch the workflow is running on
            git push
            echo "meetings.json updated and pushed."
          else
            echo "No changes to meetings.json."
          fi
